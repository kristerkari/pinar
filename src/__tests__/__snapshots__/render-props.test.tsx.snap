// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`render props control buttons should allow custom next and prev buttons (show next) 1`] = `
<View
  onLayout={[Function]}
  style={
    [
      {
        "position": "relative",
      },
      {
        "maxHeight": undefined,
        "maxWidth": undefined,
      },
      {
        "flex": 1,
      },
      undefined,
    ]
  }
>
  <View
    style={
      {
        "height": undefined,
        "width": undefined,
      }
    }
  >
    <ScrollView
      automaticallyAdjustContentInsets={false}
      bounces={false}
      horizontal={true}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      pagingEnabled={true}
      removeClippedSubviews={true}
      scrollEnabled={true}
      scrollEventThrottle={16}
      scrollsToTop={false}
      showsHorizontalScrollIndicator={false}
      showsVerticalScrollIndicator={false}
    >
      <View
        accessible={true}
        key="00"
        style={
          {
            "height": 1334,
            "width": 750,
          }
        }
      >
        <View
          key=".0"
        >
          <Text>
            1
          </Text>
        </View>
      </View>
      <View
        accessible={true}
        key="11"
        style={
          {
            "height": 1334,
            "width": 750,
          }
        }
      >
        <View
          key=".1"
        >
          <Text>
            2
          </Text>
        </View>
      </View>
      <View
        accessible={true}
        key="22"
        style={
          {
            "height": 1334,
            "width": 750,
          }
        }
      >
        <View
          key=".2"
        >
          <Text>
            3
          </Text>
        </View>
      </View>
    </ScrollView>
    <View
      style={
        {
          "alignItems": "center",
          "bottom": 25,
          "display": "flex",
          "flexDirection": "row",
          "justifyContent": "center",
          "left": 0,
          "position": "absolute",
          "right": 0,
        }
      }
    >
      <View
        key="0/.0"
        style={
          {
            "backgroundColor": "#333",
            "borderRadius": 4,
            "height": 8,
            "marginBottom": 3,
            "marginLeft": 3,
            "marginRight": 3,
            "marginTop": 3,
            "width": 8,
          }
        }
      />
      <View
        key="1/.1"
        style={
          {
            "backgroundColor": "rgba(0,0,0,.2)",
            "borderRadius": 4,
            "height": 8,
            "marginBottom": 3,
            "marginLeft": 3,
            "marginRight": 3,
            "marginTop": 3,
            "width": 8,
          }
        }
      />
      <View
        key="2/.2"
        style={
          {
            "backgroundColor": "rgba(0,0,0,.2)",
            "borderRadius": 4,
            "height": 8,
            "marginBottom": 3,
            "marginLeft": 3,
            "marginRight": 3,
            "marginTop": 3,
            "width": 8,
          }
        }
      />
    </View>
    <View
      pointerEvents="box-none"
      style={
        [
          {
            "alignItems": "center",
            "backgroundColor": "transparent",
            "flex": 1,
            "flexDirection": "row",
            "justifyContent": "space-between",
            "left": 0,
            "paddingHorizontal": 10,
            "paddingVertical": 10,
            "position": "absolute",
            "top": 0,
          },
          {
            "height": 1334,
            "width": 750,
          },
        ]
      }
    >
      <View />
      <TouchableOpacity
        accessibilityLabel="Custom next button"
        accessibilityRole="button"
        onPress={[Function]}
      >
        <Text>
          Next
        </Text>
      </TouchableOpacity>
    </View>
  </View>
</View>
`;

exports[`render props control buttons should allow custom next and prev buttons (show prev and next) 1`] = `
<View
  onLayout={[Function]}
  style={
    [
      {
        "position": "relative",
      },
      {
        "maxHeight": undefined,
        "maxWidth": undefined,
      },
      {
        "flex": 1,
      },
      undefined,
    ]
  }
>
  <View
    style={
      {
        "height": undefined,
        "width": undefined,
      }
    }
  >
    <ScrollView
      automaticallyAdjustContentInsets={false}
      bounces={false}
      horizontal={true}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      pagingEnabled={true}
      removeClippedSubviews={true}
      scrollEnabled={true}
      scrollEventThrottle={16}
      scrollsToTop={false}
      showsHorizontalScrollIndicator={false}
      showsVerticalScrollIndicator={false}
    >
      <View
        accessible={true}
        key="00"
        style={
          {
            "height": 1334,
            "width": 750,
          }
        }
      >
        <View
          key=".0"
        >
          <Text>
            1
          </Text>
        </View>
      </View>
      <View
        accessible={true}
        key="11"
        style={
          {
            "height": 1334,
            "width": 750,
          }
        }
      >
        <View
          key=".1"
        >
          <Text>
            2
          </Text>
        </View>
      </View>
      <View
        accessible={true}
        key="22"
        style={
          {
            "height": 1334,
            "width": 750,
          }
        }
      >
        <View
          key=".2"
        >
          <Text>
            3
          </Text>
        </View>
      </View>
    </ScrollView>
    <View
      style={
        {
          "alignItems": "center",
          "bottom": 25,
          "display": "flex",
          "flexDirection": "row",
          "justifyContent": "center",
          "left": 0,
          "position": "absolute",
          "right": 0,
        }
      }
    >
      <View
        key="0/.0"
        style={
          {
            "backgroundColor": "rgba(0,0,0,.2)",
            "borderRadius": 4,
            "height": 8,
            "marginBottom": 3,
            "marginLeft": 3,
            "marginRight": 3,
            "marginTop": 3,
            "width": 8,
          }
        }
      />
      <View
        key="1/.1"
        style={
          {
            "backgroundColor": "#333",
            "borderRadius": 4,
            "height": 8,
            "marginBottom": 3,
            "marginLeft": 3,
            "marginRight": 3,
            "marginTop": 3,
            "width": 8,
          }
        }
      />
      <View
        key="2/.2"
        style={
          {
            "backgroundColor": "rgba(0,0,0,.2)",
            "borderRadius": 4,
            "height": 8,
            "marginBottom": 3,
            "marginLeft": 3,
            "marginRight": 3,
            "marginTop": 3,
            "width": 8,
          }
        }
      />
    </View>
    <View
      pointerEvents="box-none"
      style={
        [
          {
            "alignItems": "center",
            "backgroundColor": "transparent",
            "flex": 1,
            "flexDirection": "row",
            "justifyContent": "space-between",
            "left": 0,
            "paddingHorizontal": 10,
            "paddingVertical": 10,
            "position": "absolute",
            "top": 0,
          },
          {
            "height": 1334,
            "width": 750,
          },
        ]
      }
    >
      <TouchableOpacity
        accessibilityLabel="Custom prev button"
        accessibilityRole="button"
        onPress={[Function]}
      >
        <Text>
          Prev
        </Text>
      </TouchableOpacity>
      <TouchableOpacity
        accessibilityLabel="Custom next button"
        accessibilityRole="button"
        onPress={[Function]}
      >
        <Text>
          Next
        </Text>
      </TouchableOpacity>
    </View>
  </View>
</View>
`;

exports[`render props control buttons should allow custom next and prev buttons (show prev) 1`] = `
<View
  onLayout={[Function]}
  style={
    [
      {
        "position": "relative",
      },
      {
        "maxHeight": undefined,
        "maxWidth": undefined,
      },
      {
        "flex": 1,
      },
      undefined,
    ]
  }
>
  <View
    style={
      {
        "height": undefined,
        "width": undefined,
      }
    }
  >
    <ScrollView
      automaticallyAdjustContentInsets={false}
      bounces={false}
      horizontal={true}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      pagingEnabled={true}
      removeClippedSubviews={true}
      scrollEnabled={true}
      scrollEventThrottle={16}
      scrollsToTop={false}
      showsHorizontalScrollIndicator={false}
      showsVerticalScrollIndicator={false}
    >
      <View
        accessible={true}
        key="00"
        style={
          {
            "height": 1334,
            "width": 750,
          }
        }
      >
        <View
          key=".0"
        >
          <Text>
            1
          </Text>
        </View>
      </View>
      <View
        accessible={true}
        key="11"
        style={
          {
            "height": 1334,
            "width": 750,
          }
        }
      >
        <View
          key=".1"
        >
          <Text>
            2
          </Text>
        </View>
      </View>
      <View
        accessible={true}
        key="22"
        style={
          {
            "height": 1334,
            "width": 750,
          }
        }
      >
        <View
          key=".2"
        >
          <Text>
            3
          </Text>
        </View>
      </View>
    </ScrollView>
    <View
      style={
        {
          "alignItems": "center",
          "bottom": 25,
          "display": "flex",
          "flexDirection": "row",
          "justifyContent": "center",
          "left": 0,
          "position": "absolute",
          "right": 0,
        }
      }
    >
      <View
        key="0/.0"
        style={
          {
            "backgroundColor": "rgba(0,0,0,.2)",
            "borderRadius": 4,
            "height": 8,
            "marginBottom": 3,
            "marginLeft": 3,
            "marginRight": 3,
            "marginTop": 3,
            "width": 8,
          }
        }
      />
      <View
        key="1/.1"
        style={
          {
            "backgroundColor": "rgba(0,0,0,.2)",
            "borderRadius": 4,
            "height": 8,
            "marginBottom": 3,
            "marginLeft": 3,
            "marginRight": 3,
            "marginTop": 3,
            "width": 8,
          }
        }
      />
      <View
        key="2/.2"
        style={
          {
            "backgroundColor": "#333",
            "borderRadius": 4,
            "height": 8,
            "marginBottom": 3,
            "marginLeft": 3,
            "marginRight": 3,
            "marginTop": 3,
            "width": 8,
          }
        }
      />
    </View>
    <View
      pointerEvents="box-none"
      style={
        [
          {
            "alignItems": "center",
            "backgroundColor": "transparent",
            "flex": 1,
            "flexDirection": "row",
            "justifyContent": "space-between",
            "left": 0,
            "paddingHorizontal": 10,
            "paddingVertical": 10,
            "position": "absolute",
            "top": 0,
          },
          {
            "height": 1334,
            "width": 750,
          },
        ]
      }
    >
      <TouchableOpacity
        accessibilityLabel="Custom prev button"
        accessibilityRole="button"
        onPress={[Function]}
      >
        <Text>
          Prev
        </Text>
      </TouchableOpacity>
      <View />
    </View>
  </View>
</View>
`;

exports[`render props control buttons should not show custom next and prev buttons when there is only one slide 1`] = `
<View
  onLayout={[Function]}
  style={
    [
      {
        "position": "relative",
      },
      {
        "maxHeight": undefined,
        "maxWidth": undefined,
      },
      {
        "flex": 1,
      },
      undefined,
    ]
  }
>
  <View
    style={
      {
        "height": undefined,
        "width": undefined,
      }
    }
  >
    <ScrollView
      automaticallyAdjustContentInsets={false}
      bounces={false}
      horizontal={true}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      pagingEnabled={true}
      removeClippedSubviews={true}
      scrollEnabled={true}
      scrollEventThrottle={16}
      scrollsToTop={false}
      showsHorizontalScrollIndicator={false}
      showsVerticalScrollIndicator={false}
    >
      <View
        accessible={true}
        key="00"
        style={
          {
            "height": 1334,
            "width": 750,
          }
        }
      >
        <View
          key=".0"
        >
          <Text>
            1
          </Text>
        </View>
      </View>
    </ScrollView>
    <View
      style={
        {
          "alignItems": "center",
          "bottom": 25,
          "display": "flex",
          "flexDirection": "row",
          "justifyContent": "center",
          "left": 0,
          "position": "absolute",
          "right": 0,
        }
      }
    >
      <View
        key="0/.0"
        style={
          {
            "backgroundColor": "#333",
            "borderRadius": 4,
            "height": 8,
            "marginBottom": 3,
            "marginLeft": 3,
            "marginRight": 3,
            "marginTop": 3,
            "width": 8,
          }
        }
      />
    </View>
    <View
      pointerEvents="box-none"
      style={
        [
          {
            "alignItems": "center",
            "backgroundColor": "transparent",
            "flex": 1,
            "flexDirection": "row",
            "justifyContent": "space-between",
            "left": 0,
            "paddingHorizontal": 10,
            "paddingVertical": 10,
            "position": "absolute",
            "top": 0,
          },
          {
            "height": 1334,
            "width": 750,
          },
        ]
      }
    >
      <View />
      <View />
    </View>
  </View>
</View>
`;

exports[`render props custom dots should allow custom active and regular dot 1`] = `
<View
  onLayout={[Function]}
  style={
    [
      {
        "position": "relative",
      },
      {
        "maxHeight": undefined,
        "maxWidth": undefined,
      },
      {
        "flex": 1,
      },
      undefined,
    ]
  }
>
  <View
    style={
      {
        "height": undefined,
        "width": undefined,
      }
    }
  >
    <ScrollView
      automaticallyAdjustContentInsets={false}
      bounces={false}
      horizontal={true}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      pagingEnabled={true}
      removeClippedSubviews={true}
      scrollEnabled={true}
      scrollEventThrottle={16}
      scrollsToTop={false}
      showsHorizontalScrollIndicator={false}
      showsVerticalScrollIndicator={false}
    >
      <View
        accessible={true}
        key="00"
        style={
          {
            "height": 1334,
            "width": 750,
          }
        }
      >
        <View
          key=".0"
        >
          <Text>
            1
          </Text>
        </View>
      </View>
      <View
        accessible={true}
        key="11"
        style={
          {
            "height": 1334,
            "width": 750,
          }
        }
      >
        <View
          key=".1"
        >
          <Text>
            2
          </Text>
        </View>
      </View>
    </ScrollView>
    <View
      style={
        {
          "alignItems": "center",
          "bottom": 25,
          "display": "flex",
          "flexDirection": "row",
          "justifyContent": "center",
          "left": 0,
          "position": "absolute",
          "right": 0,
        }
      }
    >
      <View
        accessibilityLabel="Custom active dot"
        key=".0"
      />
      <View
        accessibilityLabel="Custom dot"
        key=".1"
      />
    </View>
    <View
      pointerEvents="box-none"
      style={
        [
          {
            "alignItems": "center",
            "backgroundColor": "transparent",
            "flex": 1,
            "flexDirection": "row",
            "justifyContent": "space-between",
            "left": 0,
            "paddingHorizontal": 10,
            "paddingVertical": 10,
            "position": "absolute",
            "top": 0,
          },
          {
            "height": 1334,
            "width": 750,
          },
        ]
      }
    >
      <View />
      <TouchableOpacity
        accessibilityLabel="Next"
        accessibilityRole="button"
        accessible={true}
        onPress={[Function]}
        testID="PinarNextButton"
      >
        <Text
          accessibilityLabel="Next"
          accessible={true}
          style={
            {
              "color": "#333",
              "fontSize": 50,
              "padding": 20,
            }
          }
        >
          ›
        </Text>
      </TouchableOpacity>
    </View>
  </View>
</View>
`;

exports[`render props custom dots should allow showing page numbers instead of dots 1`] = `
<View
  onLayout={[Function]}
  style={
    [
      {
        "position": "relative",
      },
      {
        "maxHeight": undefined,
        "maxWidth": undefined,
      },
      {
        "flex": 1,
      },
      undefined,
    ]
  }
>
  <View
    style={
      {
        "height": undefined,
        "width": undefined,
      }
    }
  >
    <ScrollView
      automaticallyAdjustContentInsets={false}
      bounces={false}
      horizontal={true}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      pagingEnabled={true}
      removeClippedSubviews={true}
      scrollEnabled={true}
      scrollEventThrottle={16}
      scrollsToTop={false}
      showsHorizontalScrollIndicator={false}
      showsVerticalScrollIndicator={false}
    >
      <View
        accessible={true}
        key="00"
        style={
          {
            "height": 1334,
            "width": 750,
          }
        }
      >
        <View
          key=".0"
        >
          <Text>
            1
          </Text>
        </View>
      </View>
      <View
        accessible={true}
        key="11"
        style={
          {
            "height": 1334,
            "width": 750,
          }
        }
      >
        <View
          key=".1"
        >
          <Text>
            2
          </Text>
        </View>
      </View>
    </ScrollView>
    <View>
      <Text>
        1
        /
        2
      </Text>
    </View>
    <View
      pointerEvents="box-none"
      style={
        [
          {
            "alignItems": "center",
            "backgroundColor": "transparent",
            "flex": 1,
            "flexDirection": "row",
            "justifyContent": "space-between",
            "left": 0,
            "paddingHorizontal": 10,
            "paddingVertical": 10,
            "position": "absolute",
            "top": 0,
          },
          {
            "height": 1334,
            "width": 750,
          },
        ]
      }
    >
      <View />
      <TouchableOpacity
        accessibilityLabel="Next"
        accessibilityRole="button"
        accessible={true}
        onPress={[Function]}
        testID="PinarNextButton"
      >
        <Text
          accessibilityLabel="Next"
          accessible={true}
          style={
            {
              "color": "#333",
              "fontSize": 50,
              "padding": 20,
            }
          }
        >
          ›
        </Text>
      </TouchableOpacity>
    </View>
  </View>
</View>
`;

exports[`render props custom dots should allow showing page numbers instead of dots and initialIndex 1`] = `
<View
  onLayout={[Function]}
  style={
    [
      {
        "position": "relative",
      },
      {
        "maxHeight": undefined,
        "maxWidth": undefined,
      },
      {
        "flex": 1,
      },
      undefined,
    ]
  }
>
  <View
    style={
      {
        "height": undefined,
        "width": undefined,
      }
    }
  >
    <ScrollView
      automaticallyAdjustContentInsets={false}
      bounces={false}
      horizontal={true}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      pagingEnabled={true}
      removeClippedSubviews={true}
      scrollEnabled={true}
      scrollEventThrottle={16}
      scrollsToTop={false}
      showsHorizontalScrollIndicator={false}
      showsVerticalScrollIndicator={false}
    >
      <View
        accessible={true}
        key="00"
        style={
          {
            "height": 1334,
            "width": 750,
          }
        }
      >
        <View
          key=".0"
        >
          <Text>
            1
          </Text>
        </View>
      </View>
      <View
        accessible={true}
        key="11"
        style={
          {
            "height": 1334,
            "width": 750,
          }
        }
      >
        <View
          key=".1"
        >
          <Text>
            2
          </Text>
        </View>
      </View>
    </ScrollView>
    <View>
      <Text>
        2
        /
        2
      </Text>
    </View>
    <View
      pointerEvents="box-none"
      style={
        [
          {
            "alignItems": "center",
            "backgroundColor": "transparent",
            "flex": 1,
            "flexDirection": "row",
            "justifyContent": "space-between",
            "left": 0,
            "paddingHorizontal": 10,
            "paddingVertical": 10,
            "position": "absolute",
            "top": 0,
          },
          {
            "height": 1334,
            "width": 750,
          },
        ]
      }
    >
      <TouchableOpacity
        accessibilityLabel="Previous"
        accessibilityRole="button"
        accessible={true}
        onPress={[Function]}
        testID="PinarPrevButton"
      >
        <Text
          accessibilityLabel="Previous"
          accessible={true}
          style={
            {
              "color": "#333",
              "fontSize": 50,
              "padding": 20,
            }
          }
        >
          ‹
        </Text>
      </TouchableOpacity>
      <View />
    </View>
  </View>
</View>
`;
